演进式开发过程管理系统
所需实体和思路
1 Requirement
是用户提出的需求
2 Backlog
经过对需求的分析，通过设计，形成的一系列工作目标，每个工作目标应该只局限于一个系统或子系统或组件或模块的系统边界内。如有必要，可以根据实际需要形成层次结构。一个需求所产生的backlog的集合逻辑上与需求是等价的，并可以相互验证。
3 Test Case
根据Backlog中的目标定义，形成可操作的目标检测流程。通过Test Case的设计，可以对应设计数据结构、交互界面。
4 Task
通过在Backlog基础上的在系统边界内的进一步分析和设计，可以形成程序员可执行的任务，任务的粒度应控制在单个子系统环境可测试的规模，测试要求能够自动化运行。
5 Code
代码包括程序代码、数据库脚本及实际。
6 Executable
最后形成的可执行程序。可执行程序必须要保证通过Test Case定义的测试。
7 Bug
这里指的是在系统交付运行后，用户反馈的系统实现缺陷。它可以是分析、设计及编码中的缺陷导致的，在修补此缺陷时，同步修补更新相关文档。

以上实体的关联关系如下：
1、Requirement和Backlog 1..*
2、Bcacklog和TestCase   1..1
3、TestCase和Task       1..*
4、Task和Code           1..1
5、Task和Executable     1..1
6  Task和Bug            1..*

在出现异常时，以Task为基准，向上寻找直至Requirement，查看是否为方向错误。
除Requirement外，所有的分析最终都是为了形成Tesk，出现异常先以Task为基准进行核查，若逻辑出现异常，继续向上寻找，直至解决。
可以控制Requirement的数量，Test会很多，但是因为边界较窄，测试和解决Bug时会更好量化，且可以把异常控制在一个较小的范围内。