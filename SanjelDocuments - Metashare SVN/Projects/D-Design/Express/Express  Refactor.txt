设计上的问题：

我们的需求是根据配置文件去打印。但在配置文件里写了三个ChartControl罗列，也就是说把它做死了。但从定义代码看，没什么变动，也就是说定义中命名是与代码不是绑定的，它明明是可以复用的。
因为这个设计的问题，控制代码就做死了。
ChartControl是一个标准的控件，它的不需要罗列，只需要循环代入就可以了。参考Web 界面的实现。

其他反馈如下：

1、需要进一步理解架构，各层级的职责，把代码放置到正确的地方。打印模块与网页实际上是在一个层次上并行的不同功能，均属于表示层实现。它的入口是在网页中，但它随后的实现应当是与网页并行的两条组件线路。但向下的底层依赖是一样的。我扩展了架构图，你可以
参考一下。
2、根据架构设计，数据应当从相应的数据层请求，在你的实现中是对的。但是应当去寻找合适的接口，如果没有正好提供你所需要的数据的接口时，要与数据层的开发员进行讨论，以保证数据的正确读取，而不要自己再去研究数据。特别是你在拷贝别人的代码的时候，第一个应该考虑的是代码的复用。CreateSeriesOriginalPoints方法中从ScmPlcData中读Series对应的数据，应该形成一个统一的方法，而不是自己重定一套。
3、硬代码的问题。在开发过程中，很多时候由于需要指定参数来进行开发，但这个特定参数尽量从上层向低层传递，这样才能正确考虑各层之间的接口。不要随意插入硬代码，这样看起来初始实现的效果，可能是对的，但想把硬代码变成变量时，发现设计是错的。比如还是CreateSeriesOriginalPoints这个方法中，你用”445058”这个硬代码，从低层请求数据，但是这个方法设计的两个参数，并不能唯一地提供给你需要的值。当然这里也许是你程序设计水平的限制，这部分代码虽然功能看起来正确，但结构上有些问题，我下面再讲。
4、参数传递的原则。只传递必要的参数，如无必要，不要传递整个对象，这样才能清晰地理解上下文。比如说，CreateSeriesOriginalPoints，如果它的功能是取一条曲线的数据，它就非常明确地传入需要的参数。

PrintingService里面也需要重构，Express中也需要重构。

先自行分析，思考改进方案，然后与Olivia，Bright，Linseed一起Review下，列出一个改进步骤发给我，再改动代码。改代码时一定会发现和改进步骤中想的不一样。修正改进步骤。下班前把第二版改进步骤发给我。

我明天看代码，再对照两版改进步骤，这样可以对比看出你的思路。




看了Adam的扩展的架构图，发现我之前的代码层次不正确。PrintingController依赖EserviceWebContext和SanjelPrintingService，EserviceWebContext和SanjelPrintingService之间不存在依赖关系，所以打印的代码应该写在PrintingController中，取数据的代码写在EserviceWebContext中，在PrintingController中进行JobTag到JobDataModel的数据转换。

Express的重构步骤：
1、首先在PrintingController里面写打印的代码，期间需要准备JobDataModel数据；
2、JobDataModel里面需要的数据可以从JobTag里面获取，
3、JobTag的数据在EserviceWebContext里面通过接口获取；
4、PrintingController里面通过调用EserviceWebContext里面的接口获取到JobTag的数据，然后进行JobTag到JobDataModel的数据转换；
5、调用打印接口完成打印。


